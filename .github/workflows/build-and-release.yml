name: Build and Release RenewitSalesforceApp

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write      # Allows creating releases
  packages: read       # If you need to read packages
  actions: read        # For workflow access

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    
    - name: Extract version info
      id: version
      shell: pwsh
      run: |
        # Get current version from csproj
        $xml = [Xml] (Get-Content "./RenewitSalesforceApp/RenewitSalesforceApp.csproj")
        $displayVersion = $xml.Project.PropertyGroup.ApplicationDisplayVersion
        
        # Use GitHub run number as build number (no file modification needed)
        $buildNumber = $env:GITHUB_RUN_NUMBER
        
        Write-Host "Version: $displayVersion"
        Write-Host "Build Number: $buildNumber"
        
        # Set outputs AND environment variables
        echo "VERSION=$displayVersion" >> $env:GITHUB_OUTPUT
        echo "BUILD_NUMBER=$buildNumber" >> $env:GITHUB_OUTPUT
        echo "TAG=v$displayVersion-$buildNumber" >> $env:GITHUB_OUTPUT
        echo "VERSION=$displayVersion" >> $env:GITHUB_ENV
        echo "BUILD_NUMBER=$buildNumber" >> $env:GITHUB_ENV
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Install MAUI workload
      run: dotnet workload install maui
    
    - name: Decode keystore
      id: decode_keystore
      uses: timheuer/base64-to-file@v1
      with:
        fileName: 'renewit.keystore'
        encodedString: ${{ secrets.KEYSTORE_BASE64 }}
    
    - name: Build Android App
      shell: pwsh
      run: |
        dotnet publish RenewitSalesforceApp/RenewitSalesforceApp.csproj `
          -f net8.0-android `
          -c Release `
          -p:ApplicationVersion=${{ steps.version.outputs.BUILD_NUMBER }} `
          -p:AndroidKeyStore=true `
          -p:AndroidSigningKeyStore=${{ steps.decode_keystore.outputs.filePath }} `
          -p:AndroidSigningKeyAlias=${{ secrets.KEY_ALIAS }} `
          -p:AndroidSigningKeyPass=${{ secrets.KEY_PASSWORD }} `
          -p:AndroidSigningStorePass=${{ secrets.KEYSTORE_PASSWORD }}
    
    - name: Generate release notes
      id: release_notes
      shell: pwsh
      run: |
        # Get commits since last tag
        $lastTag = $(git describe --tags --abbrev=0 2>$null)
        if ($lastTag) {
            Write-Host "Getting commits since $lastTag"
            $commits = $(git log "$lastTag..HEAD" --pretty=format:"- %s" --no-merges)
        } else {
            Write-Host "No previous tags found, getting last 10 commits"
            $commits = $(git log --pretty=format:"- %s" -10 --no-merges)
        }
        
        if ($commits) {
            $notes = $commits -join "`n"
        } else {
            $notes = "- Initial release"
        }
        
        # Escape newlines for GitHub Actions output
        $notes = $notes -replace "`n", "%0A"
        echo "NOTES=$notes" >> $env:GITHUB_OUTPUT
    
    - name: Rename APK
      shell: pwsh
      run: |
        # Search more broadly for any APK file
        $apkFiles = Get-ChildItem -Path ./RenewitSalesforceApp/bin/Release/net8.0-android/**/*.apk -Recurse
    
        if ($apkFiles.Count -eq 0) {
          Write-Host "No APK files found in build output. Checking other possible locations..."
          # Try alternate locations
          $apkFiles = Get-ChildItem -Path ./RenewitSalesforceApp/bin/**/*.apk -Recurse
        }
    
        if ($apkFiles.Count -eq 0) {
          Write-Error "No APK files found. Build may have failed."
          exit 1
        }
    
        # Select the first APK found (or largest one if multiple exist)
        $sourceApk = $apkFiles | Sort-Object Length -Descending | Select-Object -First 1
    
        Write-Host "Found APK: $($sourceApk.FullName)"
        Write-Host "APK Size: $([math]::Round($sourceApk.Length / 1MB, 2)) MB"
    
        $targetApk = "RenewitSalesforceApp-v${{ steps.version.outputs.VERSION }}-${{ steps.version.outputs.BUILD_NUMBER }}.apk"
        Copy-Item $sourceApk.FullName -Destination $targetApk
        Write-Host "APK renamed to: $targetApk"
    
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.TAG }}
        name: Renew-it Salesforce App v${{ steps.version.outputs.VERSION }} (Build ${{ steps.version.outputs.BUILD_NUMBER }})
        body: ${{ steps.release_notes.outputs.NOTES }}
        files: RenewitSalesforceApp-v${{ steps.version.outputs.VERSION }}-${{ steps.version.outputs.BUILD_NUMBER }}.apk
        draft: false
        prerelease: false
    
    - name: Create/update version.json
      shell: pwsh
      run: |
        # Get release notes and clean special characters
        $releaseNotes = @"
        ${{ steps.release_notes.outputs.NOTES }}
        "@
    
        # Remove problematic characters that break PowerShell parsing
        $cleanNotes = $releaseNotes -replace "[├└│─]", "-" -replace "%0A", "`n"
    
        # Create version info object
        $versionInfo = @{
            version = "${{ steps.version.outputs.VERSION }}"
            buildNumber = [int]"${{ steps.version.outputs.BUILD_NUMBER }}"
            notes = $cleanNotes
            downloadUrl = "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.TAG }}/RenewitSalesforceApp-v${{ steps.version.outputs.VERSION }}-${{ steps.version.outputs.BUILD_NUMBER }}.apk"
            required = $false
            releaseDate = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ss")
        }
    
        # Convert to JSON and save
        $versionInfo | ConvertTo-Json -Depth 10 | Set-Content -Path docs/version.json -Encoding UTF8
    
        Write-Host "✅ Created version.json successfully"
    
    - name: Commit version.json only
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "Update version.json for v${{ steps.version.outputs.VERSION }}-${{ steps.version.outputs.BUILD_NUMBER }} [skip ci]"
        file_pattern: "docs/version.json"
        skip_dirty_check: true